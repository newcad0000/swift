name: CI

on:
  push:
    branches:
      - swiftwasm
      - swiftwasm-release/5.3
  pull_request:
    branches:
      - swiftwasm
      - swiftwasm-release/5.3

jobs:
  ubuntu1804_build:
    timeout-minutes: 0
    runs-on: ubuntu-18.04

    steps:
      - name: Free disk space
        run: |
          df -h
          sudo apt-get purge libgcc-9-dev gcc-9 libstdc++-9-dev
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo rm -rf /opt/hostedtoolcache
          sudo rm -rf /usr/share/dotnet
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h
      - uses: actions/checkout@v1
        with:
          path: swift
      - name: Prepare sccache timestamp
        id: cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")
      - uses: actions/cache@v1
        with:
          path: ../build-cache
          key: ubuntu-18.04-sccache-v10-5.3-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            ubuntu-18.04-sccache-v10-5.3-
      - uses: mxschmitt/action-tmate@v3
      - name: Build Ubuntu 18.04 installable archive
        run: |
          ./utils/webassembly/ci.sh
          echo "Cleanup build directory to free disk space"
          rm -rf ../build
      - name: Upload 18.04 installable archive
        uses: actions/upload-artifact@v1
        with:
          name: ubuntu18.04-installable
          path: ../swift-wasm-5.3-SNAPSHOT-ubuntu18.04-x86_64.tar.gz
#      - name: Pack test results
#        run: tar cJf swift-test-results.tar.gz ../build/*/swift-linux-x86_64/swift-test-results
#      - name: Upload test results
#        uses: actions/upload-artifact@v1
#        with:
#          name: linux-test-results
#          path: ./swift-test-results.tar.gz

  ubuntu2004_build:
    timeout-minutes: 0
    runs-on: ubuntu-20.04

    steps:
      - name: Free disk space
        run: |
          df -h
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo rm -rf /opt/hostedtoolcache
          sudo rm -rf /usr/share/dotnet
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h
      - uses: actions/checkout@v1
        with:
          path: swift
      - name: Prepare sccache timestamp
        id: cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")
      - uses: actions/cache@v1
        with:
          path: ../build-cache
          key: ubuntu-20.04-sccache-v10-5.3-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            ubuntu-20.04-sccache-v10-5.3-
      - uses: mxschmitt/action-tmate@v3
      - name: Build Ubuntu 20.04 installable archive
        run: |
          ./utils/webassembly/ci.sh
      - name: Upload Ubuntu 20.04 installable archive
        uses: actions/upload-artifact@v1
        with:
          name: ubuntu20.04-installable
          path: ../swift-wasm-5.3-SNAPSHOT-ubuntu20.04-x86_64.tar.gz
#      - name: Pack test results
#        run: tar cJf swift-test-results.tar.gz ../build/*/swift-linux-x86_64/swift-test-results
#      - name: Upload test results
#        uses: actions/upload-artifact@v1
#        with:
#          name: linux-test-results
#          path: ./swift-test-results.tar.gz

  macos_build:
    timeout-minutes: 0
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v1
        with:
          path: swift
      - name: Prepare sccache timestamp
        id: cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")
      - uses: actions/cache@v1
        with:
          path: ../build-cache
          key: ${{ runner.os }}-sccache-v10-5.3-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            ${{ runner.os }}-sccache-v10-5.3-
      - name: Build macOS installable archive
        run: |
          sudo xcode-select --switch /Applications/Xcode_12.app/Contents/Developer/
          ./utils/webassembly/ci.sh
      - name: Upload macOS installable archive
        uses: actions/upload-artifact@v1
        with:
          name: macos-installable
          path: ../swift-wasm-5.3-SNAPSHOT-macos-x86_64.tar.gz
      - name: Pack test results
        run: tar cJf swift-test-results.tar.gz ../target-build/*/swift-macosx-x86_64/swift-test-results
      - name: Upload test results
        uses: actions/upload-artifact@v1
        with:
          name: macos-test-results
          path: ./swift-test-results.tar.gz

  macos_smoke_test:
    name: Run smoke tests on macOS
    runs-on: macos-latest
    needs: macos_build
    steps:
      - name: Download installable macOS archive
        uses: actions/download-artifact@v1
        with:
          name: macos-installable
      - name: Build hello.wasm
        shell: bash
        run: |
          set -x
          tar xf $(find . -name "swift-wasm-*.tar.gz" -type f)
          TOOLCHAIN_PATH=$(find "$PWD" -name "swift-wasm-*" -type d)
          echo 'print("Hello, world!")' > hello.swift
          $TOOLCHAIN_PATH/usr/bin/swiftc \
                -target wasm32-unknown-wasi \
                -sdk $TOOLCHAIN_PATH/usr/share/wasi-sysroot \
                hello.swift -o hello.wasm && \
                echo "Successfully linked hello.wasm"
      - name: Test SwiftPM
        shell: bash
        run: |
          set -x
          TOOLCHAIN_PATH=$(find "$PWD" -name "swift-wasm-*" -type d)
          mkdir test
          cd test
          $TOOLCHAIN_PATH/usr/bin/swift package init
          $TOOLCHAIN_PATH/usr/bin/swift build --triple wasm32-unknown-wasi
      - name: Upload hello.wasm compiled with macOS package
        uses: actions/upload-artifact@v1
        with:
          name: macos-hello.wasm
          path: hello.wasm

  ubuntu1804_smoke_test:
    name: Run smoke tests on Ubuntu 18.04
    runs-on: ubuntu-18.04
    needs: ubuntu1804_build
    steps:
      - name: Download installable Ubuntu 18.04 archive
        uses: actions/download-artifact@v1
        with:
          name: ubuntu18.04-installable
      - name: Build hello.wasm
        shell: bash
        run: |
          set -x
          tar xf $(find . -name "swift-wasm-*.tar.gz" -type f)
          TOOLCHAIN_PATH=$(find "$PWD" -name "swift-wasm-*" -type d)
          echo 'print("Hello, world!")' > hello.swift
          $TOOLCHAIN_PATH/usr/bin/swiftc \
                -target wasm32-unknown-wasi \
                -sdk $TOOLCHAIN_PATH/usr/share/wasi-sysroot \
                hello.swift -o hello.wasm && \
                echo "Successfully linked hello.wasm"
      - name: Test SwiftPM
        shell: bash
        run: |
          set -x
          TOOLCHAIN_PATH=$(find "$PWD" -name "swift-wasm-*" -type d)
          mkdir test
          cd test
          $TOOLCHAIN_PATH/usr/bin/swift package init
          $TOOLCHAIN_PATH/usr/bin/swift build --triple wasm32-unknown-wasi
      - name: Upload hello.wasm compiled with Ubuntu 18.04 package
        uses: actions/upload-artifact@v1
        with:
          name: ubuntu18.04-hello.wasm
          path: hello.wasm

  ubuntu2004_smoke_test:
    name: Run smoke tests on Ubuntu 20.04
    runs-on: ubuntu-20.04
    needs: ubuntu2004_build
    steps:
      - name: Download installable Ubuntu 20.04 archive
        uses: actions/download-artifact@v1
        with:
          name: ubuntu20.04-installable
      - name: Build hello.wasm
        shell: bash
        run: |
          set -x
          tar xf $(find . -name "swift-wasm-*.tar.gz" -type f)
          TOOLCHAIN_PATH=$(find "$PWD" -name "swift-wasm-*" -type d)
          echo 'print("Hello, world!")' > hello.swift
          $TOOLCHAIN_PATH/usr/bin/swiftc \
                -target wasm32-unknown-wasi \
                -sdk $TOOLCHAIN_PATH/usr/share/wasi-sysroot \
                hello.swift -o hello.wasm && \
                echo "Successfully linked hello.wasm"
      - name: Test SwiftPM
        shell: bash
        run: |
          set -x
          TOOLCHAIN_PATH=$(find "$PWD" -name "swift-wasm-*" -type d)
          mkdir test
          cd test
          $TOOLCHAIN_PATH/usr/bin/swift package init
          $TOOLCHAIN_PATH/usr/bin/swift build --triple wasm32-unknown-wasi
      - name: Upload hello.wasm compiled with Ubuntu 20.04 package
        uses: actions/upload-artifact@v1
        with:
          name: ubuntu20.04-hello.wasm
          path: hello.wasm
